name: "Octave Static Code Analysis for MATLAB"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Allows manual trigger from the Actions tab

jobs:
  analyze:
    name: Analyze MATLAB Code with Octave
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Octave
      - name: Install Octave
        run: |
          sudo apt-get update
          sudo apt-get install -y octave

      # Step 3: Create the MATLAB analysis script
      - name: Create MATLAB analysis script
        run: |
          echo "addpath(genpath(pwd)); \
          addpath('analysis'); % Add this line if codeAnalysis is in 'analysis' folder \
          files = dir('**/*.m'); \
          results = {}; \
          if isempty(files), disp('No MATLAB files found.'); exit; end; \
          for k = 1:length(files), \
            filePath = fullfile(files(k).folder, files(k).name); \
            fid = fopen(filePath, 'r'); \
            code = fread(fid, '*char')'; \
            fclose(fid); \
            issues = codeAnalysis(code); \
            if ~isempty(issues), results{end+1} = {filePath, issues}; end; \
          end; \
          save('code-analysis-results.mat', 'results');" > analyze_code.m

      # Step 4: Run the analysis script using Octave
      - name: Run static code analysis
        run: |
          octave --no-gui analyze_code.m

      # Step 5: Convert results to SARIF format
      - name: Convert results to SARIF
        run: |
          octave --no-gui --eval "load('code-analysis-results.mat'); \
          fid = fopen('code-analysis-results.sarif', 'w'); \
          fprintf(fid, '{ \"version\": \"2.1.0\", \"runs\": [ { \"tool\": { \"driver\": { \"name\": \"Octave Static Analysis\", \"version\": \"1.0\" } }, \"results\": ['); \
          for i = 1:length(results), \
            fprintf(fid, '{ \"ruleId\": \"MATLAB001\", \"message\": { \"text\": \"%s\" }, \"locations\": [ { \"physicalLocation\": { \"artifactLocation\": { \"uri\": \"%s\" } } } ] },', results{i}{2}{:}, results{i}{1}); \
          end; \
          fprintf(fid, '] } ] }'); \
          fclose(fid);"

      # Step 6: Upload SARIF file to GitHub Security tab
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: code-analysis-results.sarif
