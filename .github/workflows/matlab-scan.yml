name: "Octave Static Code Analysis for MATLAB"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze MATLAB Code with Octave
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Octave
      - name: Install Octave
        run: |
          sudo apt-get update
          sudo apt-get install -y octave

      # Step 3: Create Octave analysis script
      - name: Create Octave analysis script
        run: |
          echo "% Add current directory and subdirectories to path" > analyze_code.m
          echo "addpath(genpath(pwd));" >> analyze_code.m
          echo "% Find all .m files" >> analyze_code.m
          echo "files = dir('**/*.m');" >> analyze_code.m
          echo "% Initialize analysis results" >> analyze_code.m
          echo "results = struct();" >> analyze_code.m
          echo "% Analyze each file" >> analyze_code.m
          echo "for k = 1:length(files)" >> analyze_code.m
          echo "  filePath = fullfile(files(k).folder, files(k).name);" >> analyze_code.m
          echo "  % Insert analysis logic here; store any issues found" >> analyze_code.m
          echo "  results(k).file = filePath;" >> analyze_code.m
          echo "  results(k).issues = 'Example issue description';" >> analyze_code.m
          echo "end" >> analyze_code.m
          echo "% Save the results to a JSON file" >> analyze_code.m
          echo "jsonwrite('code-analysis-results.json', results);" >> analyze_code.m

      # Step 4: Run the static code analysis using Octave
      - name: Run Octave analysis
        run: |
          octave --no-gui analyze_code.m

      # Step 5: Convert JSON to SARIF
      - name: Install SARIF Conversion Library
        run: |
          pip install sarif-om

      - name: Convert JSON to SARIF
        run: |
          python3 -c "
import json
import sarif_om as sarif
with open('code-analysis-results.json') as f:
    issues = json.load(f)
runs = [sarif.Run(
    tool=sarif.Tool(name='Octave Analysis'), 
    results=[
        sarif.Result(
            ruleId='example-rule', 
            message=sarif.Message(text=issue['issues']), 
            locations=[
                sarif.Location(
                    physicalLocation=sarif.PhysicalLocation(
                        artifactLocation=sarif.ArtifactLocation(uri=issue['file'])
                    )
                )
            ]
        ) for issue in issues
    ]
)]
sarif_log = sarif.SarifLog(schemaVersion='2.1.0', runs=runs)
with open('code-analysis-results.sarif', 'w') as sarif_file:
    sarif_file.write(sarif_log.json(exclude_none=True))
          "

      # Step 6: Upload the SARIF results
      - name: Upload SARIF results
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-results
          path: code-analysis-results.sarif
