name: "Octave Static Code Analysis for MATLAB"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:  # Allows manual trigger from the Actions tab

jobs:
  analyze:
    name: Analyze MATLAB Code with Octave
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Octave
      - name: Install Octave
        run: |
          sudo apt-get update
          sudo apt-get install -y octave

      # Step 3: Check for .m files in the repository
      - name: Find .m files
        id: find_files
        run: |
          m_files=$(find . -name "*.m")
          if [ -z "$m_files" ]; then
            echo "No .m files found!"
            exit 1
          else
            echo "$m_files"
          fi

      # Step 4: Create MATLAB analysis script in the correct location
      - name: Create MATLAB analysis script
        run: |
          echo "% Add current directory and subdirectories to path" > .github/custom-queries/matlab/analyze_code.m
          echo "addpath(genpath(pwd));" >> .github/custom-queries/matlab/analyze_code.m
          echo "% Find all .m files" >> .github/custom-queries/matlab/analyze_code.m
          echo "files = dir('**/*.m');" >> .github/custom-queries/matlab/analyze_code.m
          echo "% Initialize analysis results" >> .github/custom-queries/matlab/analyze_code.m
          echo "results = {};" >> .github/custom-queries/matlab/analyze_code.m
          echo "% Analyze each file" >> .github/custom-queries/matlab/analyze_code.m
          echo "for k = 1:length(files)" >> .github/custom-queries/matlab/analyze_code.m
          echo "  filePath = fullfile(files(k).folder, files(k).name);" >> .github/custom-queries/matlab/analyze_code.m
          echo "  fid = fopen(filePath, 'r');" >> .github/custom-queries/matlab/analyze_code.m
          echo "  code = fread(fid, '*char')';" >> .github/custom-queries/matlab/analyze_code.m
          echo "  fclose(fid);" >> .github/custom-queries/matlab/analyze_code.m
          echo "  % Add any custom analysis logic here" >> .github/custom-queries/matlab/analyze_code.m
          echo "  issues = {};" >> .github/custom-queries/matlab/analyze_code.m
          echo "  if ~isempty(issues)" >> .github/custom-queries/matlab/analyze_code.m
          echo "    results{end+1} = {filePath, issues};" >> .github/custom-queries/matlab/analyze_code.m
          echo "  end" >> .github/custom-queries/matlab/analyze_code.m
          echo "end" >> .github/custom-queries/matlab/analyze_code.m
          echo "% Save the analysis results to a .mat file" >> .github/custom-queries/matlab/analyze_code.m
          echo "save('code-analysis-results.mat', 'results');" >> .github/custom-queries/matlab/analyze_code.m

      # Step 5: Run the static code analysis using Octave
      - name: Run MATLAB code analysis with Octave
        run: |
          octave --no-gui .github/custom-queries/matlab/analyze_code.m

      # Step 6: Convert JSON to CSV
      - name: Convert JSON to CSV
        run: |
          json2csv code-analysis-results.json code-analysis-results.csv

      # Step 7: Convert CSV to SARIF (using a third-party tool)
      - name: Convert CSV to SARIF
        run: |
          # Replace with the command to run your chosen SARIF conversion tool
          sarif-converter code-analysis-results.csv sarif-report.sarif

      # Step 8: Upload the SARIF report
      - name: Upload SARIF report
        uses: actions/upload-artifact@v3
        with:
          name: sarif-report
          path: sarif-report.sarif
